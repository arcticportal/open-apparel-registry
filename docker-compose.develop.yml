services:
  # ===================POSTGIS=SERVICE=========================
  database:
    image: quay.io/azavea/postgis:3-postgres12.4-slim
    env_file: .env
    environment:
      - POSTGRES_USER=openapparelregistry
      - POSTGRES_PASSWORD=openapparelregistry
      - POSTGRES_DB=openapparelregistry
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "openapparelregistry"]
      interval: 3s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - postgis-data:/var/lib/postgresql
    networks:
      - OAR
  
  # ===================MEMCACHED=SERVICE=========================
  memcached:
    image: memcached:1.6-alpine
    entrypoint:
      - memcached
      - -m 256
    networks:
      - OAR

  # ===================DJANGO=SERVICE=========================
  django:
    container_name: django
    env_file: .env
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - POSTGRES_USER=openapparelregistry
      - POSTGRES_PASSWORD=openapparelregistry
      - POSTGRES_DB=openapparelregistry
      - CACHE_HOST=memcached
      - CACHE_PORT=11211
      - DJANGO_ENV=Development
      - DJANGO_SECRET_KEY=secret
      - DJANGO_LOG_LEVEL=INFO
      - AWS_PROFILE=${AWS_PROFILE:-open-apparel-registry}
      - OAR_CLIENT_KEY=
      - NOTIFICATION_EMAIL_TO=notification@example.com
      # NOTE the AWS_S3* variables are only used for testing s3 in development.
      # The deployed application uses a policy attached to the ECS task instead
      # of using keys.
      - AWS_S3_ACCESS_KEY_ID
      - AWS_S3_SECRET_ACCESS_KEY
      - AWS_STORAGE_BUCKET_NAME
    build:
      context: ./src/django
      dockerfile: Dockerfile
    volumes:
      - ./src/django:/usr/local/src
      # - $HOME/.aws:/root/.aws:ro
    working_dir: /usr/local/src
    depends_on:
      database:
        condition: service_healthy
      memcached:
        condition: service_started
    # entrypoint: ./init.sh
    entrypoint: ./start.sh
    ports:
      - "8081:8081"
    cpus: 2
    networks:
      - OAR

  # ===================APP=SERVICE=========================
  app:
    image: node:14-slim
    working_dir: /usr/local/src
    volumes:
      - ./src/app:/usr/local/src
      # Use a Docker volume to cache node_modules
      - node_modules:/usr/local/src/node_modules
      - ./src/django/static:/usr/local/src/build
      # - $HOME/.aws:/root/.aws:ro
    environment:
      - REACT_APP_GIT_COMMIT=${REACT_APP_GIT_COMMIT:-latest}
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
      - PORT=6543
    ports:
      - 6543:6543
    command: bash -c "
      yarn install
      && yarn run start
      "
    networks:
      - OAR

networks:
  OAR:
    driver: bridge

volumes:
  node_modules: null
  postgis-data: null
