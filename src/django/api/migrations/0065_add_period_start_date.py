# Generated by Django 2.2.23 on 2021-07-08 18:47

from django.db import migrations, models
import django.utils.timezone
from dateutil.relativedelta import relativedelta

from django.core.exceptions import ObjectDoesNotExist

def update_existing_apilimits(apps, schema_editor):
    ApiLimit = apps.get_model('api', 'ApiLimit')
    limits = ApiLimit.objects.all()
    for limit in limits:
        limit.period_start_date = limit.created_at
        limit.save()


def update_existing_apiblocks(apps, schema_editor):
    ApiLimit = apps.get_model('api', 'ApiLimit')
    ApiBlock = apps.get_model('api', 'ApiBlock')
    blocks = ApiBlock.objects.all()
    for block in blocks:
        try:
            limit = ApiLimit.objects.get(contributor=block.contributor)
            block.until = limit.period_start_date + relativedelta(years=1)
            block.save()
        except ObjectDoesNotExist:
            # If a block's contributor has no limit set, do nothing.
            pass;


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0064_correct_contrib_type_misspelling'),
    ]

    operations = [
        migrations.AddField(
            model_name='apilimit',
            name='period_start_date',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='historicalapilimit',
            name='period_start_date',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False),
            preserve_default=False,
        ),
        migrations.RunPython(update_existing_apilimits),
        migrations.RunPython(update_existing_apiblocks)
    ]
