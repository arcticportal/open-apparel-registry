# Generated by Django 2.2.24 on 2022-02-18 14:05
from collections import defaultdict

import django.contrib.postgres.fields
from django.db import migrations, models
from django.db.models import Q

from api.helpers import (get_single_contributor_field_values,
                         get_list_contributor_field_values,
                         format_custom_text)


# Copied from api/models.py to ensure we use models for the migration
def get_custom_text(apps, facility_ids=list):
    Facility = apps.get_model('api', 'Facility')
    FacilityListItem = apps.get_model('api', 'FacilityListItem')
    EmbedField = apps.get_model('api', 'EmbedField')

    # If passed an empty array, update all facilities (where applicable)
    if len(facility_ids) == 0:
        print('Indexing custom text for all facilities...')
        facility_ids = Facility.objects.all().values_list('id', flat=True)

    # Get a list of searchable embed fields
    fields_filter = (Q(searchable=True) & Q(visible=True)
                     & Q(embed_config__isnull=False))
    fields = EmbedField.objects.filter(fields_filter)

    # Get a list of contributors with searchable fields
    contributor_ids = fields.values_list('embed_config__contributor',
                                         flat=True).distinct()

    # Get a list of active FacilityListItems for the given facilities.
    # Only include list items where the contributors have searchable fields.
    # Select the most recent item for each facility for each contributor.
    items_filter = (Q(facility_id__in=facility_ids)
                    & Q(source__contributor_id__in=contributor_ids)
                    & Q(source__is_active=True)
                    & Q(facilitymatch__is_active=True))
    items = FacilityListItem.objects.filter(items_filter) \
        .distinct('facility__id', 'source__contributor__id') \
        .order_by('facility__id', 'source__contributor__id', '-created_at') \
        .iterator()

    custom_fields = defaultdict(list)
    contributor_fields = defaultdict(list)

    for item in items:
        contributor_id = item.source.contributor.id

        # Calculate a list of searchable fields for the item's contributor
        if len(contributor_fields[contributor_id]) == 0:
            contributor_fields[contributor_id] = fields.filter(
                    Q(embed_config__contributor__id=contributor_id)) \
                    .values_list('column_name', flat=True)

        formatted_fields = [{'value': '', 'column_name': f} for f
                            in contributor_fields[contributor_id]]

        # Get the field values from the item for all of the submitting
        # contributor's searchable fields
        if item.source.source_type == 'SINGLE':
            item_fields = get_single_contributor_field_values(
                                    item,
                                    formatted_fields
                                )
        else:
            item_fields = get_list_contributor_field_values(
                                    item,
                                    formatted_fields
                                 )

        item_fields_array = [format_custom_text(contributor_id, f['value'])
                             for f in item_fields if f['value']]

        # Add the values to the dictionary entry for the item's facility
        custom_fields[item.facility.id] += item_fields_array

    return custom_fields


def populate_custom_text_array(apps, schema_editor):
    FacilityIndex = apps.get_model('api', 'FacilityIndex')
    facilities = FacilityIndex.objects.exclude(custom_text='') \
                              .filter(custom_text__isnull=False)
    custom_fields = get_custom_text(apps, facilities.values_list('id', flat=True))

    for facility in facilities.iterator():
        facility.custom_text_array = custom_fields.get(facility.id, list())
        facility.save()


def do_nothing_on_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0083_facilityindex_extendedfields'),
    ]

    operations = [
        migrations.AddField(
            model_name='facilityindex',
            name='custom_text_array',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(help_text='A collection of custom values to search for the facility'), default=list, size=None),
        ),
        migrations.RunPython(populate_custom_text_array, do_nothing_on_reverse),
    ]
