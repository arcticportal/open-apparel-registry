# Generated by Django 2.2.24 on 2022-02-21 14:50

from django.db import migrations, models
from api.facility_type_processing_type import get_facility_and_processing_type
from api.helpers import clean
from api.extended_fields import (CLAIM_FIELDS, extract_int_range_value,
                                 get_parent_company_extendedfield_value,
                                 get_product_type_extendedfield_value)


def create_field(field_name, value, claim, apps):
    ExtendedField = apps.get_model('api', 'ExtendedField')
    c = claim.contributor
    f = claim.facility

    try:
        field = ExtendedField.objects.get(facility_claim_id=claim.id,
                                          field_name=field_name)
        field.value = value
        field.save()
    except ExtendedField.DoesNotExist:
        ExtendedField.objects.create(contributor=c,
                                     facility=f,
                                     facility_claim_id=claim.id,
                                     field_name=field_name,
                                     value=value)


def value_is_valid(value):
    return (value is not None and value.strip() != ""
        and value.lower() != "other"
        and value.lower() != "denim services"
        and value.lower() != "boarding")


def process_facility_and_processing_type_claim_values(claim, apps):
    facility_type = getattr(claim, 'facility_type')
    facility_value = {
        'raw_values': [],
        'matched_values': [],
    }
    claim.facility_type = None
    facility_value['raw_values'].append(facility_type)
    if value_is_valid(facility_type):
        result = get_facility_and_processing_type(facility_type)
        if result[0] is not None:
                claim.facility_type = clean(result[2])
                facility_value['matched_values'].append(result)
                create_field('facility_type', facility_value, claim, apps)

    processing_types = getattr(claim, 'facility_production_types')
    if processing_types is not None and isinstance(processing_types, str):
        processing_types = (processing_types.split('|') if '|' in processing_types
                  else [processing_types])
    if processing_types is not None:
        processing_value = {
            'raw_values': list(processing_types),
            'matched_values': [],
        }
        claim_values = []
        for value in list(processing_types):
            if value_is_valid(value):
                result = get_facility_and_processing_type(value)
                if result[0] is not None:
                        processing_value['matched_values'].append(result)
                        claim_values.append(clean(result[3]))
        if len(processing_value['matched_values']) > 0:
            create_field('processing_type', processing_value, claim, apps)
            claim.facility_production_types = claim_values

    claim.save()


def process_other_claim_fields(claim, apps):
    ExtendedField = apps.get_model('api', 'ExtendedField')
    for claim_field, extended_field in CLAIM_FIELDS:
        field_value = getattr(claim, claim_field)
        if field_value is not None and field_value != "":
            if (extended_field == 'facility_type' or
                extended_field == 'processing_type'):
                continue
            elif extended_field == 'number_of_workers':
                field_value = extract_int_range_value(field_value)
            elif extended_field == 'parent_company':
                field_value = get_parent_company_extendedfield_value(
                    field_value.name
                )
            elif extended_field == 'product_type':
                field_value = get_product_type_extendedfield_value(field_value)

            create_field(extended_field, field_value, claim, apps)
        else:
            ExtendedField.objects.filter(facility_claim_id=claim.id,
                                         field_name=extended_field).delete()


def migrate_claim_fields(apps, schema_editor):
    FacilityClaim = apps.get_model('api', 'FacilityClaim')
    claims = FacilityClaim.objects.filter(status='APPROVED')
    for claim in FacilityClaim.objects.filter(status='APPROVED').iterator():
        process_facility_and_processing_type_claim_values(claim, apps)
        process_other_claim_fields(claim, apps)

def do_nothing_on_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0087_rename_production_type_to_processing_type'),
    ]

    operations = [
        migrations.RunPython(migrate_claim_fields, do_nothing_on_reverse),
    ]
